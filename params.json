{"name":"Scan-path-graph","tagline":"Web application that imports and displays scan path and fixation data from commercial eye tracker systems. Features include: plot playback; user-defined raw data conversion;  data filter on time range, data order, and data duration; export graph to image file. Please read README before trying out demo. Demo:","body":"Scan path plotter\r\n===============\r\n\r\nThis is a web application to plot scan path based on eye tracking data of images. It can read a (image, data) file pair and draw scan path as output. All graphs are drawn in ```svg``` format and can be exported into ```png``` image for download.\r\n\r\n##### Table of Contents  \r\n* [Features](#features)  \r\n* [File format](#file-format)  \r\n* [User account system](#user-account-system)\r\n   * [Behavior](#behavior)\r\n   * [Security](#security)\r\n\r\nFeatures\r\n---------------\r\n* A simple user account system used to maintain file relations and for revisiting.\r\n    * File uploading. You can upload one image with multiple data files for that image each time.\r\n    * Listing of files that have been uploaded. Click one image item and choose a data item, the application will start plotting automatically.\r\n* A user control bar.\r\n    * Playback control. You can replay entire plotting sequence or step data points.\r\n    * Timeframe bar. Data points are mapped to this bar for a better view on the timing of each point in the entire timeframe, as well as the spread of each data point.\r\n    * Settings. You can apply filters to the current dataset or adjust thresholds for use with fixation calculation.\r\n        * Turn on fixation calculation will give you a new set of data points calculated from the data read from input file.\r\n        * You can also export the graph to ```png``` format for download.\r\n* Information display for each data point\r\n    * Data point size represents the relative fixation duration of that point. The bigger the longer\r\n    * Each data point on the graph is responsive to mouse hover event. When hovering over one, the statistics of current data point will be displayed at bottom-left corner of the window.\r\n    * A rollover will popup if there is an overlapping of multiple data points.\r\n    * Animation on connected edges represents the direction of where the eye scans from, and where it will scan next.\r\n\r\nFile format\r\n---------------\r\nThe application reads in a file format called ```.tbs```, which is a simple text file in the following form:\r\n* All spaces are tab delimited\r\n    * 1st line: Trial name\r\n    * 2nd line: sample rate; an integer represents samples/sec; e.g. 120\r\n    * 3rd line: fixation register points (UL UR LL LR) x,y for each point\r\n    * 4th line: image register points (UL UR LL LR) x,y for each point\r\n    * 5th line and on: data (x y start duration)\r\n* An example data file:\r\n\r\n```\r\nExample trial\r\n120\r\n140,92\t364,97\t138,388\t364,392\r\n124,85\t503,89\t122,363\t501,368\r\n220\t40\t0.0\t141.666666667\r\n182\t100\t216.666666667\t141.666666667\r\n178\t101\t366.666666667\t166.666666667\r\n179\t107\t541.666666667\t475.0\r\n307\t53\t1091.66666667\t125.0\r\n309\t66\t1225.0\t50.0\r\n305\t68\t1283.33333333\t366.666666667\r\n304\t227\t1733.33333333\t25.0\r\n```\r\n\r\nUser account system\r\n---------------\r\n* Since this application is in its initial stage, with the consideration of fitting it into the scope of a one-semester student project, the user account system is designed to be working, in terms of managing previously uploaded files for users. Thus current system employs a **fake** database system, leaving out the detailed aspects needed for a truly secure user system.\r\n\r\n###Behavior:\r\n  * At the login window, when user type in a (username, password) combination, the application will check if that combination exists in record, and read record if so. If not, **it will automatically create an entry in the record for that combination.**\r\n  * A record is a simple plaintext file stored in ```JSON``` format. This file contains all file names related to a certain (u,p) combination.\r\n  * For each (u,p) on record, the application creates a folder in both ```/data``` and ```/img```. Folder name is MD5 hashed(```MD5(username)``` concat ```MD5(password)```).\r\n  * All images under this (u,p) combination will be stored under ```/img/userHash``` with MD5 hashed filename.\r\n  * All data files under this (u,p) combination will be stored under ```/data/userHash``` with MD5 hashed filename(```MD5(imageName)``` concat ```MD5(dataFileName)```).\r\n  * All these file names are written in the record. So a file retrieval will simply be reading from the record, and finding the corresponding file.\r\n\r\n###Security:\r\n  * Since the application uses a fake database system to record files under users, do not use it in large scale applications or open networks.\r\n  * Data files are stored in plaintext. Do not store sensitive data.\r\n  * Since strings that represent user information are MD5 hashed, do not assume that (username,password) combinations are uncrackable. Treat (u,p) as only an identifier to your files.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}